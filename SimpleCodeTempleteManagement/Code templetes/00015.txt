[Title]C++) Winsock을 이용한 채팅 프로그램
내 블로그에 담기카페에 담기
카페에 담기
전체공지 등록게시판 공지 등록대문 등록
전체공지 등록게시판 공지 등록
대문 등록
게시판 공지 등록
게시판 공지 등록대문 등록
저작권 위반 파일 이용 제한해당 파일(or 링크)에 대한 저작권 위반 신고가
접수되어 이용을 제한합니다.저작권이 있는 음원 파일을 저작권자의 허락 없이 무단으로 
공유하는 것은 저작권자의 권리를 침해하는 불법행위입니다.
네이버는 저작권 침해로 인한 피해를 사전에 방지하기 위해,
저작권자로부터 보호가 요청된 음원 파일에 대해 이용에 제한을 
두고 있습니다. 
건강하고 깨끗한 인터넷 환경을 만들어 나갈 수 있도록 많은 
관심과 참여를 부탁드립니다.
 
저작권 위반 파일 이용 제한저작권 위반 음원이 본문 내에 있어 담기 기능을
제한합니다.저작권이 있는 음원 파일을 저작권자의 허락 없이 무단으로 
공유하는 것은 저작권자의 권리를 침해하는 불법행위입니다.
네이버는 저작권 침해로 인한 피해를 사전에 방지하기 위해,
저작권자로부터 보호가 요청된 음원 파일에 대해 이용에 제한을 
두고 있습니다. 
건강하고 깨끗한 인터넷 환경을 만들어 나갈 수 있도록 많은 
관심과 참여를 부탁드립니다.
 
저작권 위반 파일 이용 제한저작권 위반 음원이 본문 내에 있어 공지/대문 
기능을 제한합니다. 저작권이 있는 음원 파일을 저작권자의 허락 없이 무단으로 
공유하는 것은 저작권자의 권리를 침해하는 불법행위입니다.
네이버는 저작권 침해로 인한 피해를 사전에 방지하기 위해,
저작권자로부터 보호가 요청된 음원 파일에 대해 이용에 제한을 
두고 있습니다. 
건강하고 깨끗한 인터넷 환경을 만들어 나갈 수 있도록 많은 
관심과 참여를 부탁드립니다.
 
작성자가 검색을 허용한 카페 글입니다.  

작성자는 글쓰기 또는 수정하기 화면 하단의
검색설정에서 검색허용여부를 설정할 수 있습니다.
목록
10장 채팅프로그램 | TCP/IP소켓프로그래밍 
 2007.05.30 10:17 
 아크님(moonhee6417) 
  
http://cafe.naver.com/homenet1/700   
 
<서버>

#include <winsock2.h>
#include <windows.h>
#include <stdio.h>
#include <process.h>
#include <stdlib.h>
#include <time.h>
/*클라이언트와 메시지를 주고 받을 포트*/
#define   PORT  5500
/*클라이언트에서 전달할 메시지의 최대 크기*/
#define BUFFERSIZE 100
/*클라이언트 대화명의 최대 크기*/
#define NAMESIZE 30

unsigned __stdcall broadcastAllClient(void *arg);
/*쓰레드의 ID 를 저장할 변수*/
unsigned  threadID;
/*뮤텍스를  저장할 변수*/
HANDLE  mutex;
/*현재 접속중인 클라이언트의 수를 저장할 변수 
현재는 접속 중인 클라이언트가 없으므로 초기값은 0*/
int clientNumber=0;
/*현재 접속중인 모든 클라이언트의 클라이언트 소켓을 저장할 변수*/
int allClientSocket[100];

int main(){
  /*쓰레드를 동기화 하기 위해서 뮤텍스 객체를 생성합니다.
 뮤텍스 객체를 생성하는데 실패하면 에러메시지를 출력하고 프로그램을 종료합니다.*/
    mutex=CreateMutex(NULL,FALSE,NULL);
    WSADATA wsadata;
 WSAStartup(MAKEWORD(2,2),&wsadata);
     
 /*클라이언트의 접속을 기다리는 서버 소켓 생성*/
 SOCKET serverSocket = socket( AF_INET, SOCK_STREAM, 0 );
    printf("서버 소켓을 생성 했습니다.\n");
 /*서버의 주소를 저장하는 구조체 serverAddress 생성*/
        sockaddr_in serverAddress; 
 /*serverAddress 구조체를 0으로 초기화*/
 memset( &serverAddress,0, sizeof( serverAddress ) );
 /*serverAddress 에 현재 IP 대입 
    INADDR_ANY->자동으로 IP 를 리턴하는 상수*/
 serverAddress.sin_addr.s_addr = htonl( INADDR_ANY );
 /*주소 타입 설정*/
  serverAddress.sin_family  = AF_INET;
 /*클라이언트와 메시지를 주고 받을 포트 번호 설정*/
  serverAddress.sin_port   = htons( PORT );
         /*서버 소켓에 주소정보 설정하합니다.
         에러가 발생하면 에러 메시지를 출력하고 프로그램을 종료합니다. */
 if(bind( serverSocket, 
   (sockaddr *)&serverAddress, 
   sizeof( serverAddress ) ) ==-1){
       printf("서버 소켓을 바인드 하는데 실패했습니다.\n");
   return 0;
 }
      /*클라이언트의 접속을 기다리는 대기모드로 전환*/
 if(listen( serverSocket, 5 )==-1){
  printf("서버 소켓을 listern 모드로 설정하는데 실패했습니다");
  return 0;
 }
  printf("채팅 서버가 실행 되었습니다.\n");
  printf("**********전체 대화 내용***********\n\n");

 while(1){
/*클라이언트의 주소 정보를 저장할 구조체 선언*/
   struct sockaddr_in clientAddress;
   int clientAddressSize=sizeof(clientAddress);
 /*클라이언트의 접속을 허락하고 클라이언트와 데이터를    주고받는 클라이언트 소켓생성합니다. 클라이언트의 주소 정보를 clientAddress 에 대입합니다.*/
   int clientSocket = accept( serverSocket, (struct sockaddr*)&clientAddress,&clientAddressSize);
/*뮤텍스를 이용해서 공유 자원을 잠급니다. 공유 자원을 열때 까지 다른 쓰레드는 공유자원을 사용할 수 없고 대기 상태에서 기다립니다.*/
    WaitForSingleObject(mutex,INFINITE);
   /*현재 접속중인 클라이언트의 수를 1증가 시킵니다.*/
   clientNumber++;
/*현재 접속중인 모든 클라이언트의 클라이언트 소켓을 저장하는 배열 allClientSocket 에 클라이언트소켓을 대입합니다.*/
   allClientSocket[clientNumber-1]=clientSocket;
/*공유 변수의 잠금을 해제합니다. 공유 자원을 사용할 수 없어서 대기 중이던 다른쓰레드의 대기 상태가 풀립니다.*/
   ReleaseMutex(mutex); 
/*클라이언트에게 전달할 환영 메시지를 저장할 배열을 선언했습니다.*/
   char greetMessage[BUFFERSIZE];
/*환영메시지를 greetMessage 에 대입했습니다.*/
   sprintf(greetMessage,"[서버]어서옵셔. 대화명을 입력해 주세요\n");
/*환영메시지를 서버로 전송합니다.*/
  send(clientSocket,greetMessage,sizeof(greetMessage),0);
/*클라이언트에서 전송한 메시지를 읽어 들여서 모든 클라이언트로 전송하는 broadcastAllClient 함수를 호출합니다.*/
unsigned long thread;
thread=_beginthreadex(NULL,0,broadcastAllClient,(void*)clientSocket,0,&threadID);
 
}
 printf("채팅을 종료 합니다\n");
   return 0;
}

/*현재 클라이언트의 메시지를 읽어 들여서 전체 클라이언트로 전송하는 broadcastAllClient 함수*/
unsigned __stdcall broadcastAllClient(void *arg){
/*클라이언트가 전송한 메시지를 읽어 들여서 저장할 배열 클라이언트가 전송하는 메시지는 클라이언트의 대화명과  클라이언트가 입력한 메시지 가 합쳐져서 서버로 전송됨*/
 char fromClient[NAMESIZE+BUFFERSIZE];
/*클라이언트가 접속하면 main 함수에서 클라이언트와의 접속을 허락하고 클라이언트와 데이터를 주고 받을수 있는 클라이언트 소켓을 생성합니다. 클라이언트 소켓을 생성한 main 함수에서는 멀티 쓰레드로 broadcastAllClient 함수를 시작하는데 이때 인자로 클라이언트 소켓을 전달합니다. main 함수에서 전달한 클라이언트 소켓을 myClientsocket 변수에 대입했습니다.*/
 int myClientSocket=(int)arg;
 int i=0;
   /*myClientSocket으로 연결된 현재 클라이언트가 전송한 메시지를 읽어 들이는 부분입니다. 현재 클라이언트가 접속을 종료 할때 까지 계속 반복합니다.*/
   while(1){
           /*현재 클라이언트가 전송한 메시지를 읽어 들여서 fromClient 배열에 대입합니다.*/
          int readlen=recv(myClientSocket,fromClient,sizeof(fromClient),0);
          /*myClientSocket 으로 연결된 현재 클라이언트가 접속을 종료 하면 readlen 변수에는 0이 대입됩니다. readlen 변수에 대입된 값이 0이하면 반복문을 종료합니다.*/
      if(readlen<=0) break;
          /*클라이언트에서 전달한 메시지를 화면에 출력합니다.*/
    printf("%s\n",fromClient);
    /*현재 클라이언트가 전달한 메시지를 다른 모든 클라이언트에게 전달하는 부분입니다. 다른 모든 클라이언트에게 메시지를 전달하기 위해서 모든 클라이언트와 연결된 클라이언트 소켓이 저장된 allClientSocket에서 클라이언트 소켓을 꺼내서 모든 클라이언트에게 fromClient 배열에 저장된 메시지를 전달합니다. 이때 전송이 끝날 때 까지 다른 쓰레드에서 allClientSocket 에 저장된 클라이언트 소켓을 추가 하거나 삭제 하지 못하도록 뮤텍스로 동기화 시켰습니다.*/
             WaitForSingleObject(mutex,INFINITE);//뮤텍스 동기 화 시작
            for( i=0;i<clientNumber;i++){
                          /*allClientSocket 의 I번째 클라이언트 소켓이 메시지를 전달한 클라이언트가 아니라면 */  
      if(allClientSocket[i]!=myClientSocket){
/*fromClient 에 저장된 메시지를 allClientSocket의 I번째 클라이언트 소켓과 연결된 클라이언트에게 전송*/
                   send(allClientSocket[i],fromClient,sizeof(fromClient),0);
         
       }
     }
ReleaseMutex(mutex);//뮤텍스 동기화 해제
   
   
  } //반복문 종료 반복문은 현재 클라이언트와의 접속이 종료 되었을때 종료됨
/*allClientSocket에서 현재 클라이언트와 연결된 클라이언트 소켓을 제가 하는 부분. 클라이언트 소켓을 제거 하는 동안에 다른 클라이언트에서 allClientSocket 에 있는 클라이언트 소켓을 꺼내서 데이터를 전송하지 못하도록 뮤텍스 동기화 시켰음*/
WaitForSingleObject(mutex,INFINITE);//뮤텍스 동기화 시작
 for(i=0;i<clientNumber;i++){
               /*allClientSocket 의 I번째 소켓이 현재 클라이언트 소켓인 myClientSocket 과 같으면*/
  if(allClientSocket[i]==myClientSocket){
                  /*현재 클라이언트 소켓의 아래쪽에 저장된 클라이언트 소켓이 하나씩 위로 당겨져서 현재 클라이언트 소켓의 자리를 덮어씀*/
   for(;i<clientNumber-1;i++){
                 allClientSocket[i]=allClientSocket[i+1];
   }
   break;
  }
  clientNumber--;//전체 클라이언트의 수를 1감소 시킴
  ReleaseMutex(mutex);//뮤텍스 동기화 종료
  closesocket(myClientSocket);//현재 클라이언트와 연결된 소켓을 종료합
    }
 return 0;
}

 

<클라이언트>

#include <winsock2.h>
#include <windows.h>
#include <stdio.h>
#include <process.h>
#include <stdlib.h>
#include <time.h>

#define   PORT  5500
#define BUFFERSIZE 100
#define NAMESIZE 30

unsigned __stdcall sendMessage(void* arg);
unsigned __stdcall receiveMessage(void *arg);

unsigned  sendThread,receiveThread;

int main(){
 WSADATA wsadata;
 WSAStartup(MAKEWORD(2,2),&wsadata);

 /*서버에 접속해서 메시지를 주고 받는 클라이언트 소켓생성*/
 int mySocket = socket( PF_INET, SOCK_STREAM, 0 );
 /*클라이언트 소켓생성에 실패하면 에러메시지를 출력하고 함수 종료*/
 if ( mySocket == -1 ){
  printf("클라이언트 소켓을 생성하는데 실패 했습니다\n");
  return 0;
 }
    printf("클라이언트 소켓을 생성 했습니다.\n");
 
    /*서버의 주소 정보를 저장할 구조체 serverAddress 선언*/
 sockaddr_in serverAddress;
 /*구조체를 0으로 초기화함*/
    memset( &serverAddress, 0,sizeof( serverAddress ) );
 /*서버의 IP 대입*/
 serverAddress.sin_addr.s_addr = inet_addr("210.182.116.115");
 /*주소의 종류 대입*/
  serverAddress.sin_family  = AF_INET;
 /*서버의 포트번호 대입*/
  serverAddress.sin_port   = htons( PORT );
 /*서버에 접속*/
 if(connect( mySocket, 
    (sockaddr *)&serverAddress, 
    sizeof( serverAddress ) )==-1){
  printf("서버와 연결하는데 실패했습니다\n");
  return 0;
 }
    /*서버에서 전송할 환영 메시지를 저장할 배열*/
    char greetMessage[BUFFERSIZE];
    /*서버에서 전송한 환영 메시지를 읽어 들임*/
    recv(mySocket,greetMessage,sizeof(greetMessage),0);
    printf("%s\n",greetMessage); 
   /*키보드 입력을 읽어 들여서 서버로 전송하는 sendMessage 함수를 멀티 쓰레드로 시작함*/
   unsigned long hSendThread=_beginthreadex(NULL,0,sendMessage,(void*)mySocket,0,&sendThread);
/*서버에서 전송한 다른 클라이언트들의 메시지를 읽어 들여서 화면에 출력하는 receiveMessage 함수를 멀티 쓰레드로 시작함*/
    unsigned long hReceiveThread=_beginthreadex(NULL,0,receiveMessage,(void*)mySocket,0,&receiveThread);
/*sendMessage 함수를 멀티 쓰레드로 실행하는 sendThread 가 종료 할때 까지 main 함수가 대기 하도록 함*/
 WaitForSingleObject   ((HANDLE)hSendThread,INFINITE);
/*receiveMessage 함수를 멀티 쓰레드로 실행하는 receiveThread 가 종료 할때 까지 main 함수가 대기 하도록 함*/

 WaitForSingleObject((HANDLE)hReceiveThread,INFINITE);
}


/*키보드 입력을 읽어 들여서 서버로 전송하는 함수*/
unsigned __stdcall sendMessage(void* arg){
/*서버와 데이터를 주고 받는 클라이언트 소켓을  멀티 쓰레드 시작시 main 함수에서 인자로 전달 받습니다. 인자로 전달 받은 클라이언트 소켓을 mySocket 에 대입합니다. */
 int mySocket=(int)arg;
/*키보드 입력을 저장할 배열*/
 char fromClientInput[BUFFERSIZE];
/*클라이언트 대화명을 저장할 배열*/
    char myName[NAMESIZE];
/*대화명과 키보드 입력내용을 하나로 묶어서 서버로 보낼 메시지를 저장할 배열*/
 char toServer[NAMESIZE+BUFFERSIZE];
 printf("채팅을 시작합니다.\n");
 printf("클라이언트의 대화명을 입력하세요 -->");
 /*입력 받은 대화명을 myName 에 대입*/
       fgets(myName,NAMESIZE,stdin);
       /*대화명 맨 끝에 NULL 문자를 추가*/
 myName[strlen(myName)-1]='\0';
    /*“대화명 님이 입장하셨습니다.” 라는 메시지를 toServer 배열에 대입*/
    sprintf(toServer,"[%s] 님이  입장 하셨습니다",myName);
 /*“대화명 님이 입장하셨습니다” 라는 toServer 배열에 저장된 메시지를 서버로 전송*/
 send(mySocket,toServer,sizeof(toServer),0);
    while(1){
        /*키보드 입력을 읽어 들여서 fromClientInput 배열에 대입*/
  fgets(fromClientInput,BUFFERSIZE,stdin);
         /*myName 에 대입된 대화명과 fromClient 에 대입된 키보드 입력을 하나로 묶어서 toServer 배열에 대입*/  
  sprintf(toServer,"[%s] %s",myName,fromClientInput);
/*toServer 배열 맨 마지막에 NULL 문자를 대입*/
  toServer[strlen(toServer)-1]='\0';
/*toServer 배열에 저장된 메시지를 서버로 전송*/
  send(mySocket,toServer,sizeof(toServer),0);
/*키보드 입력이 “quit" 이면  ”대화명 님이 나가셨습니다“ 라는 메시지를 서버로 전송하고 서버와의 연결을 종료함*/
  if(strcmp(strlwr(fromClientInput),"quit\n")==0){
  sprintf(toServer,"[%s] 님이 나가셨습니다.",myName);
  send(mySocket,toServer,sizeof(toServer),0);
  printf("프로그램을 종료합니다.\n");
  closesocket(mySocket);
         break;
  }
 }
 return 0;
}

 /*서버에서부터 전달받은 다른 클라이언트의 메시지를 화면에 출력하는 함수 . sendMessage 와 멀티 쓰레드로 실행됨*/
unsigned __stdcall receiveMessage(void *arg){
/*main 함수로부터 전달받은 클라이언트 소켓을 mySocket 에 대입*/
    int mySocket=(int)arg;
/*서버에서 전달한 메시지의 바이트 수를 대입할 변수*/
       int strlen=0;
/*서버에서 전달한 메시지를 저장할 변수. 서버에서는 메시지를 입력한 클라이언트의 대화명과 클라이언트의 메시지가 하나로 묶여서 전달됨*/
       char fromServer[NAMESIZE+BUFFERSIZE];
    while(1){
/*서버에서 메시지를 읽어 들여서 frmServer 에 대입함*/
     strlen=recv(mySocket,fromServer,sizeof(fromServer),0);
/*strlen 이 0인 경우는 서버 소켓이 종료 되었을때 이므로 이때는 함수를 종료함. 함수를 종료 하면 receiveMessage 함수를 실행하는 쓰레드도 종료됨*/
     if(strlen<=0) break;
/*서버로부터 전달 받은 메시지를 화면에 출력함*/
     printf("%s\n",fromServer);
    
  }
    return 0;
 }





 작성자의 카페글 더보기 
 
moonhee6417님의 블로그   
 
덧글 0개  | 등록순최신순 
등록순최신순 | 조회수 15 | 
  인쇄  | 신고 
죄송합니다. 덧글 시스템 오류로 덧글을 읽거나 쓸 수 없습니다. 문제가 지속될 경우 고객센터에 알려주시면 친절하게 안내해 드리겠습니다. 목록
▲ topwaitforsingleobject mutex infinite에 대한 카페검색글▶더보기
 
700 10장 채팅프로그램   아크님 
 2007.05.30 15 
 
 

 

      
    
  
작성하신 글은 아래의 서비스로 보내신 글입니다.
해당 서비스에서도 삭제 반영 됩니다.
(비디오반영은 추후 제공됩니다.)

* 글보내기 정보는 아래와 같습니다.

 
             
           

        
본 게시물 작성자는 본인인증을 하지 않았습니다. 상품등록게시판에 게시물을 작성할 때에는 온라인 아이디의 사용자가 본인임을 확인하는 '본인인증'을 거칩니다.
단, 직접거래인 경우 본인인증을 나중에 할 수 있도록 제공하고 있습니다.

본 게시글의 작성자는 개인정보보호를 위하여 일회용 안심번호
기능을 이용하고 있습니다.
판매자 연락처 : 0 
일회용 안심번호 사용기간 : 임시번호로 전화를 걸면 실제 전화번호로 통화가 연결되며,
통화료 외 부가이용료가 없습니다. 
(실제 전화번호가 휴대폰인 경우 임시번호 옆에 휴대폰 
아이콘이 표시되며 문자발신도 가능합니다.)거래를 하실 경우 판매자의 실제 전화번호를 확인해두시는 
것이 좋습니다. 
(안전결제 이용시 실제 전화번호 확인 가능)  
에스크로 이체 방식이란?
거래대금을 제3자 (에스크로 전문 업체)에게 맡긴 뒤 
물품 배송을 확인하고 판매자에게 지불하는 제도로써, 
물품을 받지 못했거나 반품할 경우에는 업체를 통해즉시 
환불해 주기 때문에 사기피해 등을 막을 수 있습니다. 
  이 게시물을 현재 게시판의 새 글로 다시 등록하시겠습니까? 
현재글은 ‘판매완료’ 상태로 자동변경됩니다.
일 1회, 총 3회 사용 가능
수락 하시겠습니까?
   
판매완료로 변경하시겠습니까?
다시 판매중으로 되돌릴 수 없습니다.
수락 하시겠습니까?
   
 
  
 회원님의 안전한 서비스 이용을 위해 비밀번호를 확인해 주세요.
IP가 자주 변경되는 네트워크 환경에서 로그인하는 경우 
IP보안을 해제 후 이용하시기 바랍니다.
다시 한번 비밀번호 확인 하시면 이용중인 화면으로 돌아가며, 작성 중이던
내용을 정상적으로 전송 또는 등록하실 수 있습니다.
 
